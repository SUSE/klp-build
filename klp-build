#!/usr/bin/env python3

import argparse

import ccp
from config import Config
from ksrc import GitHelper
import utils
import templ
from ibs import IBS

def create_parser() -> argparse.ArgumentParser:
    parentparser = argparse.ArgumentParser(add_help=False)
    parentparser.add_argument('--work-dir', type=str, default='',
            help='Destination of the to be create bsc directory. This argument can be omitted if KLP_WORK_DIR environment variable is set to a proper directory.')
    parentparser.add_argument('-b', '--bsc', type=int, required=True,
            help='The bsc number related to this livepatch. This will be the directory name of the resulting livepatches')
    parentparser.add_argument('--filter', type=str,
            help='Filter out codestreams using a regex. Example: 15\.3u[0-9]+')

    parser = argparse.ArgumentParser(add_help=False)
    sub = parser.add_subparsers(dest='cmd')

    setup = sub.add_parser('setup', parents = [parentparser])
    setup.add_argument('--data', type=str, default='',
            help='Livepatch data directory (kernel-rpms, ex-kernels, ipa-clones). You can omit this argument if KLP_DATA_DIR environment variable is set to a proper directory.')
    setup.add_argument('--redownload', action='store_true',
            help='Replaces the currently used codestream.in file')
    setup.add_argument('--disable-ccp', action='store_true',
            help='klp-ccp runs automatically on setup. This option disables it')
    setup.add_argument('--cve', type=str, required=True,
            help='The CVE assigned to this livepatch')
    setup.add_argument('--conf', type=str,
            help='The kernel CONFIG used to be build the livepatch')
    setup.add_argument('--file-funcs', required=True, action='append', nargs='*',
            help='Codestream, file and functions to be livepatched. Can be set '
            'multiple times. The format is --file-funcs 12.3 file/path.c func1 '
            'func2 --file-func 12.[45] file/patch2 func1...')
    setup.add_argument('--module', type=str,
            help='The module that will be livepatched')
    setup.add_argument('-u', '--upstream-commits', required=True,
            nargs='+', help='Commit hashes used to solve the CVE')
    setup.add_argument('--archs', required=True,
            nargs='+', help='Supported architectures for this livepatch')

    ccp_opts = sub.add_parser('run-ccp', parents = [parentparser])

    templ = sub.add_parser('create-lp', parents = [parentparser])
    templ.add_argument('--codestream', type=str, required=True,
            help='Codestream to generate the livepatch files to. E.g 15.2u12')

    sub.add_parser('build', parents = [parentparser],
            help='Build the specified codestreams using osckgr')

    sub.add_parser('format-patches', parents = [parentparser],
            help='Extract patches from kgraft-patches')

    patches = sub.add_parser('get-patches', parents = [parentparser])
    patches.add_argument('-u', '--upstream-commits', required=True,
            nargs='+', help='Commit hashes used to solve the CVE')

    ibs = sub.add_parser('ibs', parents = [parentparser],
            help='Manipulate livepatch packages in IBS')

    ibs.add_argument('--push', action='store_true',
            help='Push livepatch packages to IBS to be built')

    ibs.add_argument('--cleanup', action='store_true',
            help='Remove livepatch packages from IBS')

    ibs.add_argument('--status', action='store_true',
            help='Check livepatch build status')

    ibs.add_argument('--download', action='store_true',
            help='Download livepatch rpms')

    return parser

if  __name__ == '__main__':
    parser = create_parser()
    args = parser.parse_args()

    config = Config(args)

    if args.cmd == 'setup':
        setup = utils.Setup(config, args.redownload, args.cve, args.conf,
                args.file_funcs, args.module, args.upstream_commits,
                args.disable_ccp, args.archs)
        setup.prepare_env()

    elif args.cmd == 'run-ccp':
        ccp = ccp.CCP(config)
        ccp.run_ccp()

    elif args.cmd == 'create-lp':
        templ = templ.Template(config, args.codestream)
        templ.GenerateLivePatches()
        templ.GeneratePatchedFuncs()

    elif args.cmd == 'get-patches':
        GitHelper.get_commits(config, args.upstream_commits)

    elif args.cmd == 'build':
        GitHelper.build(config)

    elif args.cmd == 'format-patches':
        GitHelper.format_patches(config)

    elif args.cmd == 'ibs':
        ibs = IBS(config)

        if args.status:
            ibs.status()
        elif args.cleanup:
            ibs.cleanup()
        elif args.download:
            ibs.download()
        elif args.push:
            ibs.push()
