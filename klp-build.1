.\" SPDX-License-Identifier: GPL-2.0-only
.\"
.\" Copyright (C) 2021-2024 SUSE
.\" Author: Fernando Gonzalez <fernando.gonzalez@suse.com>
.\"

.TH klp-build 1
.SH NAME
klp-build \- the kernel livepatching creation tool
.SH SYNOPSIS
.B klp-build
[-h] [-v] [-V]
<command> [-h] [-n NAME] [--filter FILTER]
.SH DESCRIPTION
.B klp-build
is a tool meant for automating the whole process of creating and testing
livepatches for the Linux kernel (SLE edition).
To reduce the burden of livepatch developement,
.B klp-build
is also capable of checking which codestreams are vulnerable, batching multiple
codestreams in parallel, and remotely building and running tests.
.SH OPTIONS
Generic options available for all commands:
.TP
.B "-h, --help"
Show command's help message and exit.
.TP
.B "-v, --verbose"
Produce more verbose output.
.TP
.BI "-n, --name" " NAME"
The livepatch name. This will be the directory name of the resulting
livepatches.
.TP
.BI --filter " FILTER"
List of accepted codestreams. Must be specified in regex format.
Example: '15\.3u[0-9]+|15\.6u0'
.br
You can also use a negative regex in order to filter out a specific codestream.
Example: '^(?!12.5u12).*'
.TP
.B -V, --version
show
.BR klp-build 's
version number and exit.
.SH COMMANDS
.TP
.B data
Manage codestreams data.
.RS 7
.TP
.B --download
Download all the missing supported codestreams data.
.TP
.B --force
Re-download also codestream that are not missing.
.RE
.TP
.B scan
In the scan,
.B klp-build
does a bulk analysis of all the pending CVEs meant to be livepatched, as
indicated in SUSE's Bugzilla. Once completed, a full report is generated
and printed in stdout with all the bugs information. Example report:
.TP
.PP
.EX
     ID  CVE         SUBSYSTEM       CVSS    PRIORITY      CLASSIFICATION    STATUS         AFFECTED
-------  ----------  ------------  ------   ----------   ----------------  -------------  --------------------
122xxxx  2021-xxxxx  scsi             7.8    Medium         complex          Incomplete(0)  No
122xxxx  2024-xxxxx  drm/amdgpu       7.8    Medium         trivial          Fixed(3)       15.6rtu0 15.6u0
122xxxx  2024-xxxxx  iommu/vt-d       7.8    High           None             Fixed(1)       15.6rtu0 15.6u0-1
.EE
.PP
.RS 7
Most of the fields are self-explanatory except for perhaps
the
.B status
and
.B affected
ones.
.TP
.B status:
*
.I Fixed(n)
Bug has been fixed in all the vulnerable SLEs.
.sp
*
.I Incomplete(n)
Most likely someone is working on the bug.
.sp
*
.I Not-Fixed
No one has started working on the bug yet. Or the bug has been discarded,
but it cannot be confirmed by
.B klp-build
alone.
.sp
*
.I Dropped
Bug has been discarded with 100% certainty, so no livepatch needed.
.sp
.I n
is the total number of backports for this specific CVE.
.sp
.B status
is derived from the available information in bugzilla, and as such
it might be incorrect and should be manually verified. That being said, in most cases
the reported information is realiable enough to be used as a hint.
.LP
.B affected:
List of codestreams still affected by the bug that need to be livepatched.
.I No
otherwise.
.PP
This subcommand does not store any data, as it is mainly targeted for automation
and as a first step during livepatch development.
.PP
Optional arguments:
.TP
.BI --cve " CVE"
If passed, scan will just analyse the given CVE.
.TP
.B --download
Download missing codestreams data.
.TP
.BI --conf " CONF"
Helps to check only the codestreams that have this config set.
Not compatible with the automated patch analysis phase.
.RE
.TP
.B setup
During the setup,
.B klp-build
analysis each codestream in order to identify those affected by
the indicated CVE. Note that in this phase a lot of per-codestream
data is generated and stored for future use. By default,
.B setup
retrieves all the technical information (files, functions, configs,
modules and archs) from the report generated during the
.B scan.
In case the report is incorrect, the values can be passed manually
with the optional arguments.
.RS 7
.TP
.BI --cve " CVE"
The CVE assigned to this livepatch.
.TP
Optional arguments:
.PP
.BI --conf " CONF"
The kernel CONFIG used to build the object to be livepatched.
.TP
.B --no-check
Do not check for already patched codestreams, do the setup for
all non filtered codestreams.
.TP
.BI --codestreams " CODESTREAMS"
Codestreams affected by the CVE. Can be used as a regex, like,
"15.u[34]".
.TP
.BI --file-funcs " [FILE_FUNCS ...]"
File and functions to be livepatched. Can be set multiple times. The format is:
.BI --file-funcs " file/path.c func1 func2..."
.BI --file-funcs " file/patch2.c func1 func2..."
.TP
.BI --mod-file-funcs " [MOD_FILE_FUNCS ...]"
Module, file and functions to be livepatched. Can be set multiple times. The
format is:
.BI --mod-file-funcs " module1 file/path.c func1 func2..."
.BI --mod-file-funcs " module2 file/patch2.c func1 func2..."
.TP
.BI --conf-mod-file-funcs " [CONF_MOD_FILE_FUNCS ...]"
Conf, module, file and functions to be livepatched. Can be set multiple times.
The format is:
.BI --conf-mod-file-funcs " conf1 module1 file/path.c func1 func2..."
.BI --conf-mod-file-funcs " conf2 module2 file/patch2.c func1 func2..."
.TP
.BI --module " MODULE"
The module that will be livepatched for all files. If empty,
.I vmlinux
will be livepatched instead.
.TP
.BI --archs " {ppc64le,s390x,x86_64} [{ppc64le,s390x,x86_64} ...]"
Supported architectures for this livepatch.
.RE
.TP
.B extract
In this phase
.B klp-build
creates the livepatch for each affected codestream based on the data generated
during the
.BR setup "."
.RS 7
.TP
.BI --avoid-ext " AVOID_EXT [AVOID_EXT ...]"
Functions to be copied into the livepatch instead of externalizing them.
Useful to make sure to include symbols that are optimized in
different architectures.
.TP
.B --no-patches
Do not apply the patches even if they exist.
.RE
.TP
.B commit
Commit the extracted livepatches to kgraft-patches (see the
.BR "SEE ALSO" " section)."
It organizes the codestreams as per indicated in the
.I groups
file. Each codestream group will have a corresponding
branch in the repository.
.RS 7
.TP
.BI "-f, --force"
Overwrite existing livepatches and branches in the repository.
.RE
.TP
.B format-patches
Extract patches from kgraft-patches (see the
.BR "SEE ALSO" " section)."
.RS 7
.TP
.BI "-v , --version" " VERSION"
Version to be added, like vX.
.RE
.TP
.B cs-diff
Compare line by line the output livepatch of two codestreams.
.RE
.TP
.B cleanup
Remove livepatch packages from SUSE's Build Service.
.TP
.B prepare-tests
Generates a tar archive per supported architecture containing
scripts and files that can later be used to run tests in the desired test benchs.
.TP
.B push
Push and commit the generated livetpatch packages to SUSE's Build Service.
By doing so,
.B klp-build
can automate the building phase for each codestream and architecture.
.RS 7
.TP
.B --wait
Wait until all codestreams builds are finished.
.RE
.TP
.B status
Check the status of the livepatch building phase initiated by the
.B push
command.
.RS 7
.TP
.B --wait
Wait until all codestreams builds are finished.
.RE
.TP
.B log
Get build logs from SUSE'S Build Service.
.RS 7
.TP
.BI --arch " {ppc64le,s390x,x86_64}"
Build architecture.
.TP
.BI --filter
Required. Needs to specify only specific codestream.
.RE
.SH FILES
.TP
.I ~/.config/klp-build/config
Personal configuration file
.TP
.I ~/klp/livepatches
Default directory where the livepatch data will be
placed, including the data generated by the different stages of the livepatch
creation
.TP
.I ~/klp/data
Default directory where the dowloaded source code will be placed
.SH EXAMPLES
Check if the codestreams for SLE 15.5 x86_64 and ppc64le are affected by
CVE-2022-1048. This CVE affects
.I snd_pcm_attach_substream()
and
.I snd_pcm_detach_substream()
functions, located in the
kernel module
.IR snd-pcm .
.IP
$
.B klp-build
setup --name bsc1197597 --cve 2022-1048 --filter '15.5' --archs x86_64 ppc64le
.PP
Or if the automated setup is incorrected, the information can be
passed manually:
.IP
$
.B klp-build
setup --name bsc1197597 --cve 2022-1048 --mod snd-pcm --conf
CONFIG_SND_PCM --file-funcs sound/core/pcm.c snd_pcm_attach_substream
snd_pcm_detach_substream --filter '15.5' --archs x86_64 ppc64le
.PP
Compare two codestreams:
.IP
$
.B klp-build
cs-diff -n bsc1197597 --filter '15.5u0|15.5u1'
.PP
.SH SEE ALSO
SUSE's kgraft-patches public repository:
.I https://github.com/SUSE/kernel-livepatch
.PP
SUSE's kernel-source public repository:
.I https://github.com/SUSE/kernel-source
.PP
.BR klp-ccp "(1) "
.SH AUTHOR
Contributors to the
.B klp-build
project. See the projectâ€™s GIT history for the complete list.
.SH DISTRIBUTION
The latest version of
.B klp-build
may be downloaded from https://github.com/SUSE/klp-build
