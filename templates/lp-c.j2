{% include 'header.j2' %}

{% if config is defined %}
#if IS_ENABLED({{ config }})
{% endif %}

{% if mod is defined %}
#if !IS_MODULE({{ config }})
#error "Live patch supports only CONFIG=m"
#endif
{% endif %}

{% if inc_src_file is not none -%}
{% include inc_src_file %}
{% endif %}




{% if mod is defined %}
#define LP_MODULE "{{ mod }}"
{% endif %}

#include <linux/kernel.h>
{% if mod is defined %}
#include <linux/module.h>
{% endif %}
#include "livepatch_bsc{{ bsc_num }}.h"
#include "../kallsyms_relocs.h"

static struct {{ ktype }}_kallsyms_reloc {{ ktype }}_funcs[] = {
{% if inc_exts_file is not none -%}
{% include inc_exts_file %}

{% elif mod is defined %}
	{ "", (void *)&, LP_MODULE },
{% else %}
	{ "", (void *)&},
{% endif %}
};

{% if mod is defined %}
static int {{ fname }}_module_notify(struct notifier_block *nb,
					unsigned long action, void *data)
{
	struct module *mod = data;
	int ret;

	if (action != MODULE_STATE_COMING || strcmp(mod->name, LP_MODULE))
		return 0;

	mutex_lock(&module_mutex);
	ret = __{{ ktype }}_resolve_kallsyms_relocs({{ ktype }}_funcs, ARRAY_SIZE({{ ktype }}_funcs));
	mutex_unlock(&module_mutex);

	WARN(ret, "%s: delayed kallsyms lookup failed. System is broken and can crash.\n",
		__func__);

	return ret;
}

static struct notifier_block {{ fname }}_module_nb = {
	.notifier_call = {{ fname }}_module_notify,
	.priority = INT_MIN+1,
};

{% endif -%}

int {{ fname }}_init(void)
{
{% if mod is defined %}
	int ret;

	mutex_lock(&module_mutex);
	if (find_module(LP_MODULE)) {
		ret = __{{ ktype }}_resolve_kallsyms_relocs({{ ktype }}_funcs,
						    ARRAY_SIZE({{ ktype }}_funcs));
		if (ret)
			goto out;
	}

	ret = register_module_notifier(&{{ fname }}_module_nb);
out:
	mutex_unlock(&module_mutex);
	return ret;
{% else %}
	return __{{ ktype }}_resolve_kallsyms_relocs({{ ktype }}_funcs, ARRAY_SIZE({{ ktype }}_funcs));
{% endif %}
}

{% if mod is defined %}
void {{ fname }}_cleanup(void)
{
	unregister_module_notifier(&{{ fname }}_module_nb);
}
{% endif -%}
{% if config is defined %}

#endif /* IS_ENABLED({{ config }}) */
{% endif -%}
